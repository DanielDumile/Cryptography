'#Session3:CryptanalysisofHillcipher#2.1#Author:DavidJosueRodriguezChavez#02/20/2019importstringimportcodecsfromnumpyimportgenfromtxt,linalg,asmatrix,asarray,squeeze,dot,zeros,savetxt,array#---------------------INITFUNCTIONS-----------------------#Returnallmultiplesofanumberuntillimit(top)asanarray:<int>defmultiples(number,top):multi=numberarray=[]whilemulti<top:array.append(multi)multi+=numberreturnarray#Returnallprimefactorsofnasanarray:<int>defprime_factors(n):i=2factors=set()whilei*i<=n:ifn%i:i+=1else:n//=ifactors.add(i)ifn>1:factors.add(n)returnlist(factors)#ReturnZnarray:<int>defzarray(numbers):zn=list(range(1,numbers[0]))forxinnumbers[1:]:foryinmultiples(x,numbers[0]):ifyinzn:zn.remove(y)print("Zn*"+str(numbers[0])+":"+str(zn))returnzn#Globalvariablesalphabet=string.printable[:len(string.printable)-6]modulo=len(alphabet)aux=[modulo]+prime_factors(modulo)zn=zarray(aux)#-------------------TOOLS------------#Printmatrixdefpmat(matrix):matrix=asarray(matrix)print(\'\\n\'.join([\'\'.join([\'{:4}\'.format(item)foriteminrow])forrowinmatrix]))#ExtendedEuclideanalgorithm,return(gcd,x,y):<int>defegcd(a,b):ifa==0:return(b,0,1)else:g,y,x=egcd(b%a,a)return(g,x-(b//a)*y,y)#ModularMultiplicativeInverse(a^-1modm),returna^-1:<intmodmodulo>defmodinv(a,modulo):g,x,y=egcd(a,modulo)ifg!=1:raiseException(\'Inversomultiplicativoinexistente\')else:returnx%modulo#---------------FUNCTIONS---------------------------#Returnadjointofmatrix:<array>defadjoint(matrix):cofactor=linalg.inv(matrix).T*linalg.det(matrix)aux=squeeze(asarray(cofactor.transpose()))foriinrange(matrix.shape[0]):forjinrange(matrix.shape[0]):aux[i][j]=round(aux[i][j]%modulo)returnaux.astype(dtype=int)#Returninverseofmatrix:<array>definverse(matrix):detinv=modinv(round(linalg.det(matrix))%modulo,modulo)adj=adjoint(matrix)inverse=(detinv*adj)%moduloreturninverse.astype(dtype=int)#Verifykeydefkverify(k):globaldetdet=round(linalg.det(k))%moduloprint("Det(k)="+str(det))ifdetinzn:returnTrueelse:returnFalse#CreatematrixKdefkmat():#Readfilefile=input("Kfilename:")data=genfromtxt(file+".csv",dtype=int,delimiter=\',\')print("Kmatrix:")pmat(data)#Verifyifkverify(data):inv=inverse(data)print("K\':")pmat(inv)print("K*K\':")pmat((dot(data,inv))%modulo)returndata,invelse:raiseException(\'Llavenovalida\')#Returnacaststring:matrix(3x3)<int>deftomat(word):array=zeros((3,3),dtype=int)i=0forxinrange(0,3):foryinrange(0,3):array[x][y]=alphabet.find(word[i])i+=1returnarray#Findavalidkeyform2strings,returnavalidkey:<array>deffindk(plaintext,ciphertext):forxinrange(0,len(plaintext),9):mmat=tomat(plaintext[x:x+9])print("Mmat:")pmat(mmat)cmat=tomat(ciphertext[x:x+9])print("Cmat:")pmat(cmat)ifkverify(mmat):invm=inverse(mmat)returndot(invm,cmat)%moduloraiseException("Cannotfindavalidkey")#--------------------CIPHERFUNCTIONS----------------------defcipher(k,word):aux=k.shape[0]-len(word)%k.shape[0]if(aux!=3):forxinrange(aux):word+=""ciphered_word=""forxinrange(0,len(word),k.shape[0]):aux=word[x:x+k.shape[0]]auxList=zeros((1,k.shape[0]),dtype=int)y=0foryinrange(k.shape[0]):#print("\'"+aux+"\'")auxList[0][y]=alphabet.find(aux[y])cipherList=dot(auxList,k)%moduloy=0foryinrange(k.shape[0]):ciphered_word+=alphabet[cipherList[0][y]]returnciphered_worddefdecipher(k,word):deciphered_word=""forxinrange(0,len(word),k.shape[0]):aux=word[x:x+k.shape[0]]auxList=zeros((1,k.shape[0]),dtype=int)y=0print("\'"+aux+"\'")foryinrange(k.shape[0]):auxList[0][y]=alphabet.find(aux[y])decipherList=dot(auxList,k)%moduloy=0foryinrange(k.shape[0]):deciphered_word+=alphabet[decipherList[0][y]]returndeciphered_word#-----------------------MAIN-----------------------------------defmain():option=""whileoption!="E":option=input("[A]nalyze,[C]ipher,[D]ecipher,[E]xit:").upper()ifoption=="A":#ReadPlaintextfile=input("Plaintextfilename:")plaintext=""withcodecs.open(file+".txt",\'r\',encoding="utf-8")asdata:plaintext=data.read()new=""forxinrange(0,len(plaintext)):ifplaintext[x]notinset(string.printable[len(string.printable)-6:]):new+=plaintext[x]plaintext=new#ReadCiphertextfile=input("Ciphertextfilename:")ciphertext=""withcodecs.open(file+".afn",\'r\',encoding="utf-8")asdata:ciphertext=data.read()#Searchforavalidkeyanak=findk(plaintext,ciphertext)print("Analysiskey:")pmat(anak)savetxt(\'analysis_key.csv\',anak,fmt=\'%i\',delimiter=\',\')print("Keysavedasanalysis_key.csv")elifoption=="C":k,kinv=kmat()file=input("Datafilename:")data=""withcodecs.open(file+".txt",\'r\',encoding="utf-8")asplaintext:data=plaintext.read()#print(data)new=""forxinrange(0,len(data)):ifdata[x]notinset(string.printable[len(string.printable)-6:]):new+=data[x]data=newwithcodecs.open(file+".afn",\'w\',encoding="utf-8")asciphered_text:ciphered_text.write(cipher(k,data))elifoption=="D":k,kinv=kmat()file=input("Datafilename:")data=""withcodecs.open(file+".afn",\'r\',encoding="utf-8")asplaintext:data=plaintext.read()withcodecs.open(file+".txt",\'w\',encoding="utf-8")asdeciphered_text:deciphered_text.write(decipher(kinv,data))if__name__==\'__main__\':main()00'