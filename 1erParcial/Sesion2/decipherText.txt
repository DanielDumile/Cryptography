'#-*-coding:utf-8-*-importosimportstringimportsysimportsubprocessimportshutilimportnumpyasnpimportmath#InstitutoPolitecnicoNacional#EscuelaSuperiordeComputo#Cryptography#Group:3CM6#Student:GonzalezNunezDaniel#Teacher:Dra.DiazSantiagoSandra#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#HillCipher#Date:20/02/2019#InicializaciondevariablesglobalesimportantessizeAlphabet=94specialCases=6matrix_size=3#COSASDEMATRICES#Funcionquerecibedosnumerosenteroscomoparametroyregresalosvaloresde#gcd(A,B)#x:ax+by=gcd(a,b)#y:ax+by=gcd(a,b)defextendedEuclideanA(numberA,numberB):numberA=int(numberA)numberB=int(numberB)ifnumberB!=0:u0=1u1=0v0=0v1=1whilenumberB!=0:residue=int(numberA)%int(numberB)quotient=(numberA-residue)/numberBu=u0-quotient*u1v=v0-quotient*v1numberA=numberBnumberB=residueu0=u1u1=uv0=v1v1=vreturnnumberA,u0,v0else:return0,1,0#FuncinquerecibecomoparametrounamatrizdeNxNyregresaeldeterminantedeesamatriz,moduloeltamaodenuestroalfabetodefgetDeterminant(matrix):returnround(np.linalg.det(matrix)%sizeAlphabet)#FuncinquerecibecomoparmetrounamatrizdeNxNyregresalamatrizadjunta.#LamatrizadjuntasedefinecomolamatriztranspuestadelproductodeldeterminanteylamatrizdecofactoresdefgetAdjoint(matrix):cofactor=np.linalg.inv(matrix).T*np.linalg.det(matrix)aux=cofactor.transpose()foriinrange(matrix_size):forjinrange(matrix_size):aux[i][j]=round(aux[i][j]%sizeAlphabet)returnaux#Funcionqueregresaelgcddeunenteroyeltamaodenuestroalfabeto,ascomoelinversomodulardeesenmero.defgetEuclidean(a):tupleValues=extendedEuclideanA(a,sizeAlphabet)returntupleValues[0],tupleValues[1]#Funcinquerecibecomoparmetrouamatrizde3x3yretornalainversadedichamatrizdefgetMatrixInverse(matrix):inverse=np.array([[-1,-1,-1],[-1,-1,-1],[-1,-1,-1]])determinant=getDeterminant(matrix)gcd,multiplicativeInverse=getEuclidean(determinant)ifgcd==1:adjoint=getAdjoint(matrix)inverse=(multiplicativeInverse*adjoint)%sizeAlphabetreturninverse#COSASPARAARCHIVOS#Funcinusadaparavalidarlosvaloresdelamatriz.#Sielgcddeldeterminantedelamatrizyelalfabetoesdiferentede1,lamatriznoesvlida.defvalidateValues(matrix,fileSource,type_cf):errorType=0factor=0.001fileSize=int(os.path.getsize(fileSource+".txt"))*factorgcd=getEuclidean(getDeterminant(matrix))[0]ifnot(gcd==1):errorType=1#iffileSize<5andtype_cf:#errorType=4returnerrorType#FuncinquerecibeunalistadecaracteresynosregresaundiccionarioconesoscaracteresdefconvertListToDictionary(myList):temporaryList=myListtemporaryDictionary={}foriinrange(specialCases):temporaryList.pop()foriinrange(len(myList)):temporaryDictionary[i]=temporaryList[i]returntemporaryDictionary#FuncinquefiltraloscaracteresvlidosdeunapalabradeffilterWord(originalWord,alphabet):finalString=""temporaryList=list(originalWord)foriinrange(len(temporaryList)):iftemporaryList[i]inalphabet.values():finalString+=temporaryList[i]returnfinalString#Funcinquerecibeuntexto,unamatrizllaveyunabanderaqueindicalaoperacionarealizar.#Silabanderaindicaquedescifraremos,calcularemoslainversadelamatrizobtenidadefencryptOrDecryptWord(originalWord,alphabet,matrix,type_cf):cipherWord=""iftype_cf==False:matrix=getMatrixInverse(matrix)temporaryList=list(originalWord)listOfKeys=[]foriinrange(len(temporaryList)):temporaryString=str(temporaryList[i])iftemporaryStringinalphabet.values():lKey=[keyforkey,valueinalphabet.items()ifvalue==temporaryString][0]listOfKeys.append(lKey)faltantes=len(listOfKeys)%matrix_sizeprint(faltantes)if(faltantes>0):foriinrange(matrix_size-faltantes):listOfKeys.append(0)foriinrange(0,len(listOfKeys),matrix_size):auxList=np.array([0,0,0]);forjinrange(matrix_size):auxList[j]=listOfKeys[i+j]newKeys=np.dot(auxList,matrix)%sizeAlphabetforjinrange(len(newKeys)):cipherWord+=(alphabet[newKeys[j]])returncipherWord#FuncionquerecibeeltextoplanoygeneraunasolapalabraconcatenandotodoeltextodefencryptOrDecryptPlainText(originalText,matrix,sizeAlphabet,alphabet,type_cf):arrayOfWords=originalText.split()fullText=""foriinrange(len(arrayOfWords)):fullText+=(filterWord(arrayOfWords[i],alphabet))cipherText=encryptOrDecryptWord(fullText,alphabet,matrix,type_cf)returncipherText#Funcinqueabreelarchivoseleccionadoparapoderleerlosvaloresdelamatrizintroducidaporelusuario.defreadMatrixValues(matrixFile):sourceFile=matrixFile+".txt"values=open(sourceFile,\'r\').read()a,b,c,d,e,f,g,h,i=values.split()matrix=np.array([[int(a),int(b),int(c)],[int(d),int(e),int(f)],[int(g),int(h),int(i)]])returnmatrix#FuncinusadaparaquitarloscarcteresquecausanproblemasaPythondefcleanCiphertext(cipherText,alphabet):cleanText=""saltar=Trueforiinrange(len(cipherText)):temporaryString=str(cipherText[i])iftemporaryStringinalphabet.values():lKey=[keyforkey,valueinalphabet.items()ifvalue==temporaryString][0]iflKey==85:ifsaltar==True:saltar=Falsecontinueelse:saltar=TrueiflKey==68:saltar=TruecleanText+=temporaryStringreturncleanText#Funcionqueabreunarchivoacifrarodescifiraryvalidalosvaloresintroducidosporelusuario.#Dependiendodelaaccinarealizar,selimpiaeltextoono.defencryptOrDecryptFromFile(matrixFile,initialFile,finalFile,type_cf):sourceFile=initialFile+".txt"originalText=open(sourceFile,\'r\').read()alphabet=convertListToDictionary(list(string.printable))iftype_cf==False:originalText=originalText[1:]originalText=originalText[:len(originalText)-1]originalText=cleanCiphertext(originalText,alphabet)matrix=readMatrixValues(matrixFile)errorType=validateValues(matrix,initialFile,type_cf)iferrorType>0:print("Error"+str(errorType)+"hasbeenmade,seethedocumentation")sys.exit()else:cipherText=repr(encryptOrDecryptPlainText(originalText,matrix,sizeAlphabet,alphabet,type_cf))file=open(finalFile+".txt",\'w\')file.write(str(cipherText))file.close()#FuncionprincipaldeftestApp():initialFile="plainText"miComando="clear"subprocess.call(miComando,shell=True)option=input("1:Encrypt\\n2:Decrypt\\nInput:")subprocess.call(miComando,shell=True)option=int(option)matrixFile=input("Nameofthefilethatcontainsthekey:")if(int(option)==1):encryptOrDecryptFromFile(matrixFile,initialFile,"cipherText",True)os.rename(\'cipherText.txt\',initialFile+".hill")print("Messagesuccessfullyciphered!")elif(option==2):shutil.copyfile(initialFile+\'.hill\',initialFile+\'_.hill\')os.rename(initialFile+\'.hill\',"cipherText.txt")os.rename(initialFile+\'_.hill\',initialFile+\'.hill\')encryptOrDecryptFromFile(matrixFile,"cipherText","decipherText",False)os.remove("cipherText.txt")print("DecipheringDONE!")testApp()'